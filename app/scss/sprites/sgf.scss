// SCSS variables are information about icon's compiled state, stored under its original file name
//
// .icon-home {
//   width: $icon-home-width;
// }
//
// The large array-like variables contain all information about a single icon
// $icon-home: x y offset_x offset_y width height total_width total_height image_path;
//
// At the bottom of this section, we provide information about the spritesheet itself
// $spritesheet: width height image $spritesheet-sprites;
$name1-name: 'name1';
$name1-x: 0;
$name1-y: 0;
$name1-offset-x: 0;
$name1-offset-y: 0;
$name1-width: 3.98rem;
$name1-height: 2.83rem;
$name1-total-width: 8.15rem;
$name1-total-height: 4.71rem;
$name1-image: 'sdf/sgf.png';
$name1: (0, 0, 0, 0, 3.98rem, 2.83rem, 8.15rem, 4.71rem, 'sdf/sgf.png', 'name1', );
$name2-name: 'name2';
$name2-x: 0;
$name2-y: 2.88rem;
$name2-offset-x: 0;
$name2-offset-y: -2.88rem;
$name2-width: 4.12rem;
$name2-height: 1.83rem;
$name2-total-width: 8.15rem;
$name2-total-height: 4.71rem;
$name2-image: 'sdf/sgf.png';
$name2: (0, 2.88rem, 0, -2.88rem, 4.12rem, 1.83rem, 8.15rem, 4.71rem, 'sdf/sgf.png', 'name2', );
$name4-name: 'name4';
$name4-x: 4.03rem;
$name4-y: 0;
$name4-offset-x: -4.03rem;
$name4-offset-y: 0;
$name4-width: 4.12rem;
$name4-height: 2.71rem;
$name4-total-width: 8.15rem;
$name4-total-height: 4.71rem;
$name4-image: 'sdf/sgf.png';
$name4: (4.03rem, 0, -4.03rem, 0, 4.12rem, 2.71rem, 8.15rem, 4.71rem, 'sdf/sgf.png', 'name4', );
$spritesheet-width: 8.15rem;
$spritesheet-height: 4.71rem;
$spritesheet-image: 'sdf/sgf.png';
$spritesheet-sprites: ($name1, $name2, $name4, );
$spritesheet: (8.15rem, 4.71rem, 'sdf/sgf.png', $spritesheet-sprites, );

// The provided mixins are intended to be used with the array-like variables
//
// .icon-home {
//   @include sprite-width($icon-home);
// }
//
// .icon-email {
//   @include sprite($icon-email);
// }
//
// Example usage in HTML:
//
// `display: block` sprite:
// <div class="icon-home"></div>
//
// To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:
//
// // CSS
// .icon {
//   display: inline-block;
// }
//
// // HTML
// <i class="icon icon-home"></i>
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url($imgUrl+#{$sprite-image})
}

@mixin sprite-size($sprite){
  $sprite-total-width: nth($sprite,7);
  $sprite-total-height: nth($sprite,8);
  background-size:$sprite-total-width $sprite-total-height;
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
  @include sprite-size($sprite)
}

// The `sprites` mixin generates identical output to the CSS template
//   but can be overridden inside of SCSS
//
// @include sprites($spritesheet-sprites);
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
